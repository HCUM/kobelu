<Window x:Class="KoBeLUAdmin.GUI.SettingsDialog"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
        mc:Ignorable="d"
        xmlns:helpers="clr-namespace:KoBeLUAdmin.Localization"
        
        xmlns:GUI="clr-namespace:KoBeLUAdmin.GUI"
        xmlns:ValueConverter="clr-namespace:KoBeLUAdmin.GUI.ValueConverter"
        xmlns:ValidationRules="clr-namespace:KoBeLUAdmin.GUI.ValidationRules"
        Title="SettingsDialog" Height="850" Width="850" >

    <Window.Resources>
        <helpers:LocalizationHelper x:Key="localization"/>
        <ValueConverter:RadioBoolToIntConverter x:Key="radioBoolToIntConverter" />
    </Window.Resources>

    <Grid Margin="0,0,15,5">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="300"/>
            <ColumnDefinition Width="300" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
        <StackPanel Grid.Row="0" Grid.Column="0">
            <Label Margin="5,5,5,5" Content="{Binding Source={StaticResource localization}, Path=.[Strings.labelDetectionMode], FallbackValue='#Detection mode'}" />
            <RadioButton Margin="5,5,5,5" IsChecked="{Binding BlobRadio, Converter={StaticResource radioBoolToIntConverter}, ConverterParameter=true}"   Content="{Binding Source={StaticResource localization}, Path=.[Strings.radioButtonBlob], FallbackValue='#Blob'}" GroupName="DetectionMode" />
            <RadioButton Margin="5,5,5,5" IsChecked="{Binding BlobRadio, Converter={StaticResource radioBoolToIntConverter}, ConverterParameter=false}"  Content="{Binding Source={StaticResource localization}, Path=.[Strings.radioButtonContour], FallbackValue='#Contour'}" GroupName="DetectionMode" />

            <Label Content="{Binding Source={StaticResource localization}, Path=.[Strings.labelCountOfRectangle], FallbackValue='#Count of rectangle'}" Margin="5,5,5,5" />
            
            <Label Content="{Binding Source={StaticResource localization}, Path=.[Strings.labelHeight], FallbackValue='#Height:'}" Margin="5,5,5,5" />
            <xctk:IntegerUpDown Text="{Binding IntegerUpDownYBox, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
            <Label Content="{Binding Source={StaticResource localization}, Path=.[Strings.labelWidth], FallbackValue='#Width:'}" Margin="5,5,5,5"/>
            <xctk:IntegerUpDown Text="{Binding IntegerUpDownXBox, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
        </StackPanel>
        <StackPanel x:Name="m_Settings" Grid.Row="0" Grid.Column="1">
            <CheckBox Margin="5,5,5,5" IsChecked="{Binding TouchInvertDisplay, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Content="{Binding Source={StaticResource localization}, Path=.[Strings.checkboxInvertDisplay], FallbackValue='#Invert Display?'}" Height="20" />
            <Label Margin="5,5,5,5" Content="{Binding Source={StaticResource localization}, Path=.[Strings.labelOffset], FallbackValue='#Offset'}" Height="25" />
            <TextBox Margin="5,5,5,5" Text="{Binding TouchOffset, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Delay=1000}" Height="20" />
            <Label Margin="5,5,5,5" Content="{Binding Source={StaticResource localization}, Path=.[Strings.labelHeight], FallbackValue='#Height'}" Height="30"/>
            <TextBox Margin="5,5,5,5" Text="{Binding TouchFieldHeight, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Delay=1000}" Height="20" />
            <Label Content="{Binding Source={StaticResource localization}, Path=.[Strings.labelSmoothingSteps], FallbackValue='#Smoothing steps'}" Height="30" />
            <TextBox Margin="5,5,5,5" Text="{Binding TouchSmoothingSteps, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Delay=1000}" Height="20" />
            <Label Content="{Binding Source={StaticResource localization}, Path=.[Strings.labelMovingThreshold], FallbackValue='#Moving threshold'}" Height="30" />
            <TextBox Margin="5,5,5,5" Text="{Binding TouchMovingThreshold, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Delay=1000}" Height="20" />
            <Label Content="{Binding Source={StaticResource localization}, Path=.[Strings.labelStoppingThreshold], FallbackValue='#Stopping threshold'}" Height="30" />
            <TextBox Margin="5,5,5,5" Text="{Binding TouchStoppingThreshold, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Delay=1000}" />
            <Label Content="{Binding Source={StaticResource localization}, Path=.[Strings.labelBoxFeedbackTimeout], FallbackValue='#Box feedback timeout'}" />
            <TextBox Margin="5,5,5,5" Text="{Binding BoxFeedbackTimeout, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
            <CheckBox Margin="5,5,5,5" IsChecked="{Binding AdaptivityEnabled, Delay=1000, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Content="{Binding .[Strings.checkboxAdaptivityEnabled], FallbackValue=#Enable automatic Adaptivity, Source={StaticResource localization}}" />
            <Label Content="{Binding Source={StaticResource localization}, Path=.[Strings.labelAdaptivityThresholdMedium], FallbackValue='#Adaptivity Threshold to Medium'}" />
            <TextBox Margin="5,5,5,5" Text="{Binding AdaptivityThresholdMedium, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Delay=1000}"  />
            <Label Content="{Binding Source={StaticResource localization}, Path=.[Strings.labelAdaptivityThresholdHard], FallbackValue='#Adaptivity Threshold to Hard'}" />
            <TextBox Margin="5,5,5,5" Text="{Binding Path=AdaptivityThresholdHard, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Delay=1000}" />
            <Label Margin="0,5,5,5" Content="{Binding .[Strings.labelNetworkSettings], FallbackValue=#NetworkSettings, Source={StaticResource localization}}" FontWeight="Bold" />
            <Label Content="{Binding .[Strings.labelNetworkTableName], FallbackValue=#NetworkTableName, Source={StaticResource localization}}" />
            <TextBox Margin="5,5,5,5" Text="{Binding NetworkTableName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
            <Label Content="{Binding .[Strings.labelNetworkAuthToken], FallbackValue=#NetworkAuthToken, Source={StaticResource localization}}" />
            <TextBox Margin="5,5,5,5" Text="{Binding NetworkAuthToken, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
            <Label Content="{Binding .[Strings.labelServerBaseAddress], FallbackValue=#ServerBaseAddress, Source={StaticResource localization}}" />
            <TextBox Margin="5,5,5,5" Text="{Binding ServerBaseAddress, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
            <CheckBox x:Name="m_UDPCheckbox" Margin="5,5,5,5" IsChecked="{Binding UDPStreamingEnabled, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  Content="{Binding Source={StaticResource localization}, Path=.[Strings.checkboxStreamUDP], FallbackValue='#Stream sceneitems via UDP to IP'}" Checked="m_UDPCheckbox_Checked" Unchecked="m_UDPCheckbox_Unchecked" />
            <TextBox Margin="5,5,5,5" Text="{Binding UDPIPTarget, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" x:Name="m_UDPAdressTextField" TextWrapping="Wrap" IsEnabled="False"/>
        </StackPanel>
        <StackPanel x:Name="m_TableSettings" Grid.Row="0" Grid.Column="2">
            <CheckBox Margin="5,5,5,5" IsChecked="{Binding ShowFPS, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Content="{Binding Source={StaticResource localization}, Path=.[Strings.checkboxShowFPSOnScreen], FallbackValue='#Show FPS on screen?'}" />
            <CheckBox Margin="5,5,5,5" IsChecked="{Binding ShowDemoAnimation, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Content="{Binding Source={StaticResource localization}, Path=.[Strings.checkboxShowDemoAnimation], FallbackValue='#Show demo animation?'}" />
            <CheckBox Margin="5,5,5,5" IsChecked="{Binding EditMode, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Content="{Binding Source={StaticResource localization}, Path=.[Strings.checkboxEnableEditMode], FallbackValue='#Enable edit mode?'}" />
            <CheckBox Margin="5,5,5,5" IsChecked="{Binding EnableFaultBoxMode, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Content="{Binding Source={StaticResource localization}, Path=.[Strings.checkboxEnableFaultDetection], FallbackValue='#Enable box fault detection'}"/>
            <CheckBox Margin="5,5,5,5" Content="{Binding Source={StaticResource localization}, Path=.[Strings.checkboxEnableEnsensoSmoothing], FallbackValue='#Enable Ensenso Smoothing'}" IsChecked="{Binding CheckBoxEnableEnsensoSmoothing, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
            <Label Content="#Touch detection:" Margin="0,0,0,0"/>
            <CheckBox Margin="5,5,5,5" IsChecked="{Binding DetectTouch, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Content="{Binding .[Strings.detectTouch], FallbackValue='#Detect touch', Source={StaticResource localization}}"/>
            <CheckBox Margin="5,5,5,5" IsChecked="{Binding DisplayTouchVideoFeed, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Content="{Binding .[Strings.displayTouchVideoFeed], FallbackValue='#Display touch video feed', Source={StaticResource localization}}"/>
            <CheckBox Margin="5,5,5,5" IsChecked="{Binding DisplayTouchDebugCoordinates, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Content="{Binding .[Strings.displayTouchDebugCoordinates], FallbackValue='#Display debug coordinates', Source={StaticResource localization}}"/>
            <Label Content="#Minimal touch depth"/>
            <xctk:IntegerUpDown Text="{Binding IntegerUpDownMinTouchDepth, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
            <Label Content="#Maximal touch depth"/>
            <xctk:IntegerUpDown Text="{Binding IntegerUpDownMaxTouchDepth, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />

            <Label Content="#Minimal touch area"/>
            <xctk:IntegerUpDown Text="{Binding IntegerUpDownMinTouchArea, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
            <Label Content="#Maximal touch area"/>
            <xctk:IntegerUpDown Text="{Binding IntegerUpDownMaxTouchArea, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />

            <Button Content="#Record new background image" Click="Button_Click"/>
        </StackPanel>
    </Grid>
</Window>
